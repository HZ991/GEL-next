### Grid example 1

This 3 column layout stacks on xs\* (each column takes up full width) but on the other breakpoints it adapts to different widths.

```tsx
<div className="relative">
  <Grid>
    <Item span={12} className="border border-primary bg-primary-20 p-2 text-center text-primary">
      Column A
    </Item>
    <Item span={12} className="border border-primary bg-primary-20 p-2 text-center text-primary">
      Column B
    </Item>
    <Item span={12} className="border border-primary bg-primary-20 p-2 text-center text-primary">
      Column C
    </Item>
  </Grid>
  <Grid className="absolute top-0 left-0 right-0 bottom-0 opacity-50">
    {new Array(12).fill(null).map((_, index) => (
      <Item key={index} span={1} className="bg-success/20 p-2 text-center text-primary" />
    ))}
  </Grid>
</div>
```

### Grid example 2

This 3 column layout stacks on xs\* (each column takes up full width) but on the other breakpoints it adapts to different widths.

```tsx
<div className="relative">
  <Grid>
    <Item span={{ initial: 4, md: 12 }} className="border border-primary bg-primary-20 p-2 text-center text-primary">
      Column 12 at MD
    </Item>
    <Item span={4} className="border border-primary bg-primary-20 p-2 text-center text-primary row-start-2">
      Column 4
    </Item>
  </Grid>
  <Grid className="absolute top-0 left-0 right-0 bottom-0">
    {new Array(12).fill(null).map((_, index) => (
      <Item key={index} span={1} className="bg-success/20 p-2 text-center text-primary" />
    ))}
  </Grid>
</div>
```

### Grid example 3

Columns can be nested inside columns to achieve greater complexity and structure the page. In effect, each column can be sub-divided into further 12 columns. The nested columns align to their own 12 col grid based on the width of the parent column.

```tsx
<div className="relative">
  <Grid>
    <Item span={12} className="border border-primary bg-primary-20 p-2 text-center text-primary">
      Column A
    </Item>
    <Item span={4} className="border border-primary bg-primary-20 p-2 text-center text-primary">
      Column B
    </Item>
    <Item span={4} className="border border-primary bg-primary-20 p-2 text-center text-primary">
      Column C
    </Item>
    <Item span={4} className="border border-primary bg-primary-20 p-2 text-center text-primary">
      Column D
    </Item>
  </Grid>
  <Grid className="absolute top-0 left-0 right-0 bottom-0 opacity-50">
    {new Array(12).fill(null).map((_, index) => (
      <Item key={index} span={1} className="bg-success/20 p-2 text-center text-primary" />
    ))}
  </Grid>
</div>
```

### Grid example 4

If a pull-right class is added to the first column it will be the top most column when stacked but displays at the far right on larger views. On xs the source order is honoured.

```tsx
<div className="relative">
  <Grid>
    <Item span={4} className="border border-primary bg-primary-20 p-2 text-center text-primary">
      Column A
    </Item>
    <Item span={4} className="border border-primary bg-primary-20 p-2 text-center text-primary">
      Column B
    </Item>
    <Item span={4} className="border border-primary bg-primary-20 p-2 text-center text-primary">
      Column C
    </Item>
  </Grid>
  <Grid className="absolute top-0 left-0 right-0 bottom-0 opacity-50">
    {new Array(12).fill(null).map((_, index) => (
      <Item key={index} span={1} className="bg-success/20 p-2 text-center text-primary" />
    ))}
  </Grid>
</div>
```

### Grid example 5

Columns can be offset to create empty space.

```tsx
<div className="relative">
  <Grid>
    <Item start={2} span={11} className="border border-primary bg-primary-20 p-2 text-center text-primary">
      Column A
    </Item>
  </Grid>
  <Grid className="absolute top-0 left-0 right-0 bottom-0 opacity-50">
    {new Array(12).fill(null).map((_, index) => (
      <Item key={index} span={1} className="bg-success/20 p-2 text-center text-primary" />
    ))}
  </Grid>
</div>
```
