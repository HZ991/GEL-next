The grouped progress rope is used for complex processes with multiple steps and stages.

```tsx
() => {
  const [activeIndex, setActiveIndex] = useState(0);
  const handleClick = useCallback(
    (index: number) => () => {
      setActiveIndex(index);
    },
    [],
  );
  const PROGRESS_ROPE_DATA: ProgressRopeProps['data'] = [
    {
      type: 'group',
      text: 'Group 1',
      steps: [
        { text: 'Step 1', onClick: handleClick(0) },
        { text: 'Step 2', onClick: handleClick(1) },
      ],
    },
    {
      type: 'group',
      text: 'Group 2',
      steps: [
        { text: 'Step 3', onClick: handleClick(2) },
        { text: 'Step 4', onClick: handleClick(3) },
      ],
    },
    {
      type: 'group',
      text: 'Group 3',
      steps: [
        { text: 'Step 5', onClick: handleClick(4) },
        { text: 'Step 6', onClick: handleClick(5) },
        { text: 'Step 7', onClick: handleClick(6) },
      ],
    },
    { text: 'Review and Submit', onClick: handleClick(7) },
  ];

  return (
    <div>
      <ProgressRope current={activeIndex} data={PROGRESS_ROPE_DATA} />
      <Well className="p-2 sm:p-2 flex items-center">
        <div className="mr-2 flex items-center space-x-1">
          <Button
            iconBefore={ArrowLeftIcon}
            soft
            look="faint"
            size="small"
            onClick={() => setActiveIndex(state => --state)}
          >
            prev
          </Button>{' '}
          <Button
            iconAfter={ArrowRightIcon}
            soft
            look="faint"
            size="small"
            onClick={() => setActiveIndex(state => ++state)}
          >
            next
          </Button>
        </div>
        <code className="flex">Current: {activeIndex}</code>
      </Well>
    </div>
  );
};
```
