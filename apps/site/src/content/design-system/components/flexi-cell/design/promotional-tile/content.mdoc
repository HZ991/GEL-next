Horizontal stacked

```jsx
{
  args: {},
  render: () => {
    return <div className="flex flex-col">
        {MOCK_PROMOS.map(({
        title,
        subtitle,
        stars
      }) => <FlexiCell tag="a" href="#" key={title} withBorder before={<FlexiCellAdornment align="center">
                <FlexiCellCircle className="h-[70px] w-[70px] border border-border bg-white">
                  <VisaBlueSymbol />
                </FlexiCellCircle>
              </FlexiCellAdornment>} topBadge={({
        className
      }) => <Badge className={className + ' leading-normal'} aria-hidden={stars ?? 'true'}>
                {stars ? 'âœ­' : 'Corner flag'}
              </Badge>}>
            <FlexiCellLabel className="text-[12px] font-normal text-muted" tag="p">
              MYER
            </FlexiCellLabel>
            <FlexiCellLabel className="text-hero" tag="h4">
              {title}
            </FlexiCellLabel>
            <FlexiCellHint>{subtitle}</FlexiCellHint>
            <FlexiCellFooter>
              <Badge color="primary">Badge 1</Badge>
              <Badge color="faint">Badge 2</Badge>
            </FlexiCellFooter>
          </FlexiCell>)}
      </div>;
  }
}
```

Promo horizontal

```jsx
{
  args: {},
  render: () => {
    return <div className="flex gap-3">
        {MOCK_VERTICAL_PROMOS.map(({
        title,
        subtitle
      }) => <FlexiCell className="max-sm:h-[255px] max-sm:min-w-[214px] sm:h-[277px] sm:min-w-[298px] sm:max-w-[298px]" href="#" tag="a" withBorder topBadge={({
        className
      }) => <Badge className={className + ' leading-normal'}>Corner flag</Badge>}>
            <FlexiCellAdornment className="mb-1">
              <img src="https://images.unsplash.com/photo-1657299170950-87e5b0eaf77c?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1740&q=80" alt="" className="h-10.5 w-full object-cover" />
            </FlexiCellAdornment>

            <FlexiCellLabel className="text-[12px] font-normal text-muted" tag="p">
              MYER
            </FlexiCellLabel>
            <FlexiCellLabel className="text-hero" tag="h4">
              {title}
            </FlexiCellLabel>
            <FlexiCellHint className="line-clamp-3 max-sm:h-10 sm:h-10.5">{subtitle}</FlexiCellHint>
            <FlexiCellFooter className="absolute max-sm:bottom-2 max-sm:left-2 sm:bottom-3 sm:left-3">
              <Badge color="primary">Badge 1</Badge>
              <Badge color="faint">Badge 2</Badge>
            </FlexiCellFooter>
          </FlexiCell>)}
      </div>;
  }
}

```

Account list

```jsx
{
  args: {},
  render: () => {
    return <>
        <FlexiCell after={<FlexiCellAdornment align="top">
              <FlexiCellLabel tag="h3" rightLabel>
                $9,999.99
              </FlexiCellLabel>
              <FlexiCellHint>avail $9,999.99</FlexiCellHint>
            </FlexiCellAdornment>} href="#" tag="a" withBorder>
          <FlexiCellLabel tag="h3">Credit card Base Styles</FlexiCellLabel>
          <FlexiCellHint>Card ending in 1234</FlexiCellHint>
        </FlexiCell>
        <FlexiCell after={<FlexiCellAdornment align="top">
              <FlexiCellLabel tag="h3" rightLabel>
                $9,999.99
              </FlexiCellLabel>
              <FlexiCellHint>avail $9,999.99</FlexiCellHint>
            </FlexiCellAdornment>} href="#" tag="a" withBorder size={{
        initial: 'default',
        sm: 'large'
      }}>
          <FlexiCellLabel tag="h3">Responsive Credit card Base Styles</FlexiCellLabel>
          <FlexiCellHint>Card ending in 1234</FlexiCellHint>
        </FlexiCell>
        <FlexiCell after={<FlexiCellAdornment align="top">
              <FlexiCellLabel tag="h3" className="font-medium" rightLabel>
                $9,999.99
              </FlexiCellLabel>
              <FlexiCellHint>avail $9,999.99</FlexiCellHint>
            </FlexiCellAdornment>} href="#" tag="a" withBorder>
          <FlexiCellLabel className="font-normal" tag="h3">
            Credit card different styles
          </FlexiCellLabel>
          <FlexiCellHint>Card ending in 1234</FlexiCellHint>
        </FlexiCell>
        <FlexiCell after={<FlexiCellAdornment align="top">
              <FlexiCellLabel tag="h3" rightLabel>
                $9,999.99
              </FlexiCellLabel>
              <FlexiCellHint>avail $9,999.99</FlexiCellHint>
            </FlexiCellAdornment>} href="#" tag="a" withBorder>
          <FlexiCellLabel tag="h3">Wrapping Credit CardCredit CardCredit CardCredit Card</FlexiCellLabel>
          <FlexiCellHint>
            Wrapping Card ending in 1234Card ending in 1234Card ending in 1234Card ending in 1234Card ending in 1234
          </FlexiCellHint>
        </FlexiCell>
        <FlexiCell after={<FlexiCellAdornment align="top">
              <FlexiCellLabel tag="h3" rightLabel>
                $9,999.99
              </FlexiCellLabel>
              <FlexiCellHint>avail $9,999.99</FlexiCellHint>
            </FlexiCellAdornment>} href="#" tag="a" withBorder>
          <FlexiCellLabel tag="h3" truncateText>
            Truncating Credit CardCredit CardCredit CardCredit Card
          </FlexiCellLabel>
          <FlexiCellHint truncateText>
            Truncating Card ending in 1234Card ending in 1234Card ending in 1234Card ending in 1234Card ending in 1234
          </FlexiCellHint>
        </FlexiCell>
      </>;
  }
}

```
