### Base pattern

This pattern is kept as simple as possible yet captures more data points than Simple name (see below) should business requirements call for more details. The labels *Given name* and *Family name* are used, as *First name* and *Last name* do not translate consistently across cultures.

**Why not one field?** Arguments for inclusivity and user control may suggest just one field for name capture, however this poses some issues when it comes to parsing a name for a database (e.g Peter van den Elshout). More often than not these databases need to speak to external agencies which ask for specific data points for such tasks as ID verification for example, as well as aligning with other business criteria.

**Title:** Only ask for a title if absolutely necessary. Gender, and how we identify ourselves is a personal topic so reasons for capture need to be clear.

```tsx
<Form spacing="large">
  <Form.Group>
    <Field label="Title">
      <Select name="title" size="large">
        <option>Select</option>
        <option>Mrs</option>
        <option>Mr</option>
        <option>Miss</option>
        <option>Ms</option>
        <option>Dr</option>
      </Select>
    </Field>
  </Form.Group>
  <Form.Group>
    <Field label="Given name">
      <Input name="given-name" size="large" className="w-6/12" />
    </Field>
  </Form.Group>
  <Form.Group>
    <Field label="Middle names (if any)">
      <Input name="middle-name" size="large" className="w-6/12" />
    </Field>
  </Form.Group>
  <Form.Group>
    <Field label="Family name">
      <Input name="family-name" size="large" className="w-6/12" />
    </Field>
  </Form.Group>
</Form>
```

### Example usage

This example shows the base pattern used with additional questions when further details are required; Any other name.

```tsx
() => {
  const [differentName, setDifferentName] = useState(false);

  return (
    <Form spacing="large">
      <Form.Group>
        <Field label="Title">
          <Select name="title" size="large">
            <option>Select</option>
            <option>Mrs</option>
            <option>Mr</option>
            <option>Miss</option>
            <option>Ms</option>
            <option>Dr</option>
          </Select>
        </Field>
      </Form.Group>
      <Form.Group>
        <Field label="Given name">
          <Input name="given-name" size="large" className="w-6/12" />
        </Field>
      </Form.Group>
      <Form.Group>
        <Field label="Middle names (if any)">
          <Input name="middle-name" size="large" className="w-6/12" />
        </Field>
      </Form.Group>
      <Form.Group>
        <Field label="Family name">
          <Input name="family-name" size="large" className="w-6/12" />
        </Field>
      </Form.Group>
      <Form.Group>
        <Field label="Have you ever been known by a name different to the one provided above?">
          <ButtonGroup size="large" onChange={value => setDifferentName(value)} value={differentName} look="hero">
            <ButtonGroup.Button value={true}>Yes</ButtonGroup.Button>
            <ButtonGroup.Button value={false}>No</ButtonGroup.Button>
          </ButtonGroup>
        </Field>
      </Form.Group>
      {differentName && (
        <Form.Group>
          <Field label="Other names">
            <Input name="other-name" size="large" className="w-6/12" />
          </Field>
        </Form.Group>
      )}
    </Form>
  );
};
```
